@implements IDisposable

    <!--<button @onclick="Next">Next</button>-->
    @if (Title != null)
    {

@*<div class ="bg-white-100 rounded-lg shadow-2xl w-3/4">
            <div class="flex">      
             <img src = "https://picsum.photos/seed/picsum/200/300" class="rounded-t-lg object-cover">             
             <div class="p-8 py-4 font-bold">@Message
                 <br>
                 <br>
                 手紙 / メール / メッセージ、ありがとう。
                 <br>
                 <br>
                 Thank you for the letter / email / message.
             </div>
            </div>
             <footer class ="bg-gray-100 rounded-b-lg text-right py-3 px-8 text-xs text-gray-300">
                 <div class= "flex">
                     <div>
                      Updated 3 days ago
                     </div>
                     <div class="px-6">
                        <button class="mt-4 bg-gradient-to-br from-green-600 to-green-500 hover:from-green-500 hover:to-green-600 text-white p-2 rounded border border-green-600" @onclick="Flip">Tap</button>
                     </div>            
                 </div>            
             </footer>
        </div>*@

 <MudCard>
       <MudCardHeader>
        <CardHeaderContent>
            <img src="https://upload.wikimedia.org/wikipedia/commons/4/42/BTS_N4.svg" alt="Lamp" width="32" height="32">
            <MudText Typo="Typo.h6"><b>@Title</b></MudText>
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>
        <MudText Typo="Typo.body1"><b>@FirstDesc</b></MudText>
    </MudCardContent>
    <MudCardActions>
        <MudButton  Variant="Variant.Filled" EndIcon="@Icons.Filled.BackHand" Color="Color.Primary"  @onclick="Flip">TAP</MudButton>
        <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" />
        <MudIconButton  Icon="@Icons.Material.Filled.Share" Color="Color.Default" />
    </MudCardActions>
</MudCard>

 
@*        <div class="flex left-0">
        <div class="flex flex-col md:flex-row md:max-w-xl rounded-lg bg-white shadow-lg">
        <div class="p-6 flex flex-col justify-start">
      <h5 class="text-gray-900 text-xl font-medium mb-3">@Title</h5>
      <h5 class="text-gray-900 text-xl font-medium mb-3">@FirstDesc</h5>
      <div class="px-6">
        <button class="mt-4 bg-gradient-to-br from-green-600 to-green-500 hover:from-green-500 hover:to-green-600 text-white p-2 rounded border border-green-600" @onclick="Flip">Tap</button>
      </div> 
        <br>
       <footer class ="bg-gray-100 rounded-b-lg text-right py-3 px-8 text-xs text-gray-300">
        <div>
           Updated 3 days ago
        </div> 
       </footer>
    </div>
  </div>
</div>*@
      <!--  <div class="max-w-sm  bg-yellow-100 rounded overflow-hidden shadow-lg">
        <div class="px-6 py-4">
        <div class="font-bold text-xl mb-2">@Message</div>
        </div>
         <div class="px-6 pt-4 pb-2">
           <button class="mt-4 bg-gradient-to-br from-green-600 to-green-500 hover:from-green-500 hover:to-green-600 text-white p-2 rounded border border-green-600" @onclick="Flip">Flip</button>
        </div>
       </div>-->
    }

@code {

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Level { get; set; }

    [Parameter]
    public int TimeOutValue { get; set; }

    [Parameter]
    public string ImagePath { get; set; }

    [Parameter]
    public string Tags { get; set; }

    [Parameter]
    public string FlipTitle { get; set; }

    public string FirstDesc { get; set; }

    [Parameter]
    public string FlipFirstDesc { get; set; }

    public string SecondDesc { get; set; }

    [Parameter]
    public string FlipSecondDesc { get; set; }

    [Parameter]
    public EventCallback<string> NextRequested { get; set; }

    bool bNowShowing = false;
    int m_currentTimeOut = 0;

    void Flip()
    {
        string tempTitle = Title;
        Title = FlipTitle;
        FlipTitle = tempTitle;

        string tempFirstDesc = FirstDesc;
        FirstDesc = FlipFirstDesc;
        FlipFirstDesc = tempFirstDesc;

        string tempSecondDesc = SecondDesc;
        SecondDesc = FlipSecondDesc;
        FlipSecondDesc = tempSecondDesc;
    }

    async Task Next()
    {
        await NextRequested.InvokeAsync(Id.ToString());
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    protected override void OnInitialized()
    {
        FirstDesc = string.Empty;
        SecondDesc = string.Empty;
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();

        if(!bNowShowing)
        {
            bNowShowing = true;
            /*while (bNowShowing && (TimeOutValue > m_currentTimeOut))
            {
                await Task.Delay(500);
                ++m_currentTimeOut;
            }

            await NextRequested.InvokeAsync(Id);*/
        }
    }

    void IDisposable.Dispose()
    {
        if(bNowShowing)
        {
            bNowShowing = false;
        }
       // wait for work to stop
       Task.Delay(600).GetAwaiter().GetResult();
    }

}
