@implements IDisposable

    <!--<button @onclick="Next">Next</button>-->
    @if (Message != null)
    {
        <div class="max-w-sm  bg-yellow-100 rounded overflow-hidden shadow-lg">
        <div class="px-6 py-4">
        <div class="font-bold text-xl mb-2">@Message</div>
        </div>
         <div class="px-6 pt-4 pb-2">
           <button class="mt-4 bg-gradient-to-br from-green-600 to-green-500 hover:from-green-500 hover:to-green-600 text-white p-2 rounded border border-green-600" @onclick="Flip">Flip</button>
        </div>
       </div>
    }

@code {

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public int TimeOutValue { get; set; }

    [Parameter]
    public string Message { get; set; }

    [Parameter]
    public string FlipMessage { get; set; }

    [Parameter]
    public EventCallback<int> NextRequested { get; set; }

    bool bNowShowing = false;
    int m_currentTimeOut = 0;
    bool bFlipped = false;
    string m_Message = string.Empty;

    void Flip()
    {
        if(!bFlipped)
        {
            Message = FlipMessage;
            bFlipped = true;
        } else
        {
            Message = m_Message;
            bFlipped = false;
        }
    }

    async Task Next()
    {
        await NextRequested.InvokeAsync(Id);
    }

    protected override void OnParametersSet()
    {
        m_Message = Message;
        base.OnParametersSet();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();

        if(!bNowShowing)
        {
            bNowShowing = true;
            /*while (bNowShowing && (TimeOutValue > m_currentTimeOut))
            {
                await Task.Delay(500);
                ++m_currentTimeOut;
            }

            await NextRequested.InvokeAsync(Id);*/
        }
    }

    void IDisposable.Dispose()
    {
        if(bNowShowing)
        {
            bNowShowing = false;
        }
       // wait for work to stop
       Task.Delay(600).GetAwaiter().GetResult();
    }

}
