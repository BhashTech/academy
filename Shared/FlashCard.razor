@implements IDisposable

<div style="padding: 1vw;
        margin: 1vw;
        float: left;
        background-color: lightgray;
        box-shadow: 10px 10px 20px 0px rgba(0,0,0,0.75);">

    <!--<button @onclick="Next">Next</button>-->
    @if (Message != null)
    {
        <p>@Message</p>
    }

    <button @onclick="Flip">Flip</button>
</div>

@code {


    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public int TimeOutValue { get; set; }

    [Parameter]
    public string Message { get; set; }

    [Parameter]
    public string FlipMessage { get; set; }

    [Parameter]
    public EventCallback<int> NextRequested { get; set; }

    bool bNowShowing = false;
    int m_currentTimeOut = 0;
    bool bFlipped = false;
    string m_Message = string.Empty;

    void Flip()
    {
        if(!bFlipped)
        {
            Message = FlipMessage;
            bFlipped = true;
        } else
        {
            Message = m_Message;
            bFlipped = false;
        }
    }

    async Task Next()
    {
        await NextRequested.InvokeAsync(Id);
    }

    protected override void OnParametersSet()
    {
        m_Message = Message;
        base.OnParametersSet();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();

        if(!bNowShowing)
        {
            bNowShowing = true;
            /*while (bNowShowing && (TimeOutValue > m_currentTimeOut))
            {
                await Task.Delay(500);
                ++m_currentTimeOut;
            }

            await NextRequested.InvokeAsync(Id);*/
        }
    }

    void IDisposable.Dispose()
    {
        if(bNowShowing)
        {
            bNowShowing = false;
        }
       // wait for work to stop
       Task.Delay(600).GetAwaiter().GetResult();
    }

}
